# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: NTFS Streams Build and Release on Tag

on:
  push:
    branches-ignore: [ 'main' ]
    tags:
    - "*.*.*"
  pull_request:
    branches: [ main ]
  
jobs:
  build:
    runs-on: windows-latest
    env:
      NTSStreamsBuildOutputFile: 'Trinet.Core.IO.Ntfs.dll'
      NTFSStreamsLibraryPath: '.\NTFS-Streams\ntfsstreams\Trinet.Core.IO.Ntfs\obj\Release\net48\${{ NTSStreamsBuildOutputFile }}'
      NTFSStreamsSolutionFile: '.\ntfsstreams\Trinet.Core.IO.Ntfs\Trinet.Core.IO.Ntfs.sln'
    steps:
      - uses: actions/checkout@main
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
      - name: Build solution
        run: msbuild -t:build -property:Configuration=Release /p:TargetFrameworkVersion=v4.8 '.\ntfsstreams\Trinet.Core.IO.Ntfs\Trinet.Core.IO.Ntfs.sln'
      - name: Upload dll file to artifact repository
        uses: actions/upload-artifact@v2
        if: github.ref_type == 'tag'
        with:
          name: NTFSStreamsLibrary
          path: ${{ env.NTFSStreamsLibraryPath }}
  release:
    needs: build
    runs-on: windows-latest
    permissions:
      contents: write
    if: github.ref_type == 'tag'
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - uses: actions/download-artifact@v2
        with:
          name: NTFSStreamsLibraryPath
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: .\Trinet.Core.IO.Ntfs.dll
          asset_name: Trinet.Core.IO.Ntfs.dll
          asset_content_type: application/dll
